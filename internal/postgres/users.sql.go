// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package postgres

import (
	"context"
)

const insertUser = `-- name: InsertUser :one
insert into users (full_name, email, password) values($1, $2, $3) returning id
`

type InsertUserParams struct {
	FullName string `json:"fullName"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.FullName, arg.Email, arg.Password)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectUser = `-- name: SelectUser :one
select id, full_name, email, password from users where id = $1
`

func (q *Queries) SelectUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, selectUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const selectUserByEmail = `-- name: SelectUserByEmail :one
select id, full_name, email, password from users where email = $1
`

func (q *Queries) SelectUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, selectUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Password,
	)
	return i, err
}
